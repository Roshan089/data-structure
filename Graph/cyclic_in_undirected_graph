#include <bits/stdc++.h>
using namespace std;

class Solution {
private:
    bool checkCycleBFS(int src, unordered_map<int, list<int>> &adjList, unordered_map<int,bool> &visited) {
        
        queue<int> q;
        
        unordered_map<int ,int> parent;
        
        q.push(src);
        visited[src]=true;
        
        while(!q.empty()){
            int fornt= q.front();
            q.pop();
            
            for(auto neg : adjList[fornt]){
               if(!visited[neg]) {
                    visited[neg]=true;
                   q.push(neg);
                   parent[neg]=fornt;
               }
               else if(parent[fornt]!=neg){
                   return true;
                        
               }
            }
        }
        return false;

    }

public:
    bool isCycle(int V, vector<vector<int>>& edges) {
        unordered_map<int, list<int>> adjList;
        unordered_map<int,bool> visited;

        for(auto edge : edges) {
            int u = edge[0];
            int v = edge[1];
            adjList[u].push_back(v);
            adjList[v].push_back(u); 
        }

        for(int i = 0; i < V; i++) {
            if(!visited[i]) {
                if(checkCycleBFS(i, adjList, visited))
                    return true;
            }
        }
        return false;
    }
};
